name: Auto Release
# Enable Settings > General > Allow auto-merge

on:
  schedule:
    # At 00:00 on Sunday
    - cron: '0 0 * * 0'
  workflow_dispatch:
permissions: write-all
jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    steps:
      - name: GitHub Checks
        uses: poseidon/wait-for-status-checks@v0.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          timeout: 500
          ignore: ${{ github.workflow }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-workspaces
      - name: Check for Changes
        run: cargo workspaces changed --error-on-empty
      - name: Check semver # IMPROVE: Bump version appropriately
        uses: obi1kenobi/cargo-semver-checks-action@v2.6
        with:
          rust-toolchain: manual
          exclude: localsavefile-test # IMPROVE: External list/config for crates to ignore in workspaces
      - name: Git Set User
        run: |-
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      - name: Bump Version
        run: |
          cargo workspaces version --force '*' --no-git-push --no-git-tag --no-global-tag --message "chore: :bookmark: Release v%v" --exact -y patch
      - name: Capture Version
        run: |
          {
            echo 'ws_version<<EOF'
            cargo workspaces version --force '*' --no-git-commit -y skip 2>&1
            echo EOF
          } >> "$GITHUB_ENV"
      - name: Output Version
        run: echo "VERSION=$(echo "$ws_version" | grep 'common version' | sed 's/.*version //')" >> $GITHUB_ENV
      - name: Update CHANGELOG.md
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --verbose
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}
      - name: Git Commit CHANGELOG.md
        run: |-
          git add CHANGELOG.md
          git commit -m "docs: :memo: Update CHANGELOG.md"
          git push origin HEAD:auto-release-${{ env.VERSION }}
          git status
      - name: Create pull request
        run: |
          gh pr create --title "Auto Release v${{ env.VERSION }}" --body "Auto release for v${{ env.VERSION }}" --base main --head auto-release-${{ env.VERSION }}
          pr_url=$(gh pr list --base main --head auto-release-${{ env.VERSION }} --json number -q '.[0].number')
          echo "pr_number=$pr_url" >> $GITHUB_ENV
          echo $pr_url
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get the commit SHA of the pull request
        run: |
          pr_sha=$(gh api "repos/${{ github.repository }}/pulls/${{ env.pr_number }}" --jq ".merge_commit_sha")
          echo "pr_sha=$pr_sha" >> $GITHUB_ENV
          echo PULL REQUEST: $pr_sha
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Invoke CI Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: CI
          ref: ${{env.pr_sha}}
      - name: Invoke Security audit Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Security audit
          ref: ${{env.pr_sha}}
      - name: Merge the pull request
        run: gh pr merge --auto --merge --repo ${{ github.repository }} ${{ env.pr_number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Wait until PR is merged or checks fail
        run: |
          COUNTER=0
          MAX_RETRIES=12
          SLEEP_TIME=10

          while ((COUNTER < MAX_RETRIES)); do
            echo "Checking PR status..."

            # Fetch PR status
            PR_STATUS=$(gh pr view "${{ env.pr_number }}" --json state --jq ".state")

            # Check if PR is merged or closed
            if [[ "$PR_STATUS" == "MERGED" ]]; then
                echo "PR is merged. Exiting."
                exit 0
            elif [[ "$PR_STATUS" == "CLOSED" ]]; then
                echo "PR was closed. Exiting."
                exit 0
            fi

            echo "Checking PR checks..."

            # Check if any checks have failed
            set +e
            CHECK_FAILED=$(gh pr checks "${{ env.pr_number }}" --json state | grep FAILURE) || true
            echo "PR Check"
            if [[ "$CHECK_FAILED" != "" ]]; then
                echo "PR checks failed. Exiting."
                exit 1
            fi

            # Increment the counter and wait
            (( COUNTER++ ))
            echo "Still waiting for PR to be merged or fail. Attempt $COUNTER of $MAX_RETRIES."
            sleep $SLEEP_TIME
          done

          echo "Maximum retries reached. Exiting."
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag the merge commit
        if: success()
        run: |-
          git reset --hard
          git fetch --all
          git checkout main
          git pull origin main
          set +e
          git tag v${{ env.VERSION }} || true
          git push origin tag v${{ env.VERSION }}
      - name: Cleanup branch if workflow fails
        if: failure() || always()
        run: gh api -X DELETE "repos/${{ github.repository }}/git/refs/heads/auto-release-${{ env.VERSION }}" || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Invoke CD Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: CD
