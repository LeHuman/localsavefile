name: Auto Release
on:
  schedule:
    # At 00:00 on Sunday
    - cron: '0 0 * * 0'
  workflow_dispatch:
permissions:
  contents: write
  checks: read
jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    steps:
      - name: GitHub Checks
        uses: poseidon/wait-for-status-checks@v0.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          timeout: 500
          ignore: ${{ github.workflow }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-workspaces
      - name: Check for Changes
        run: cargo workspaces changed --error-on-empty
      - name: Check semver # IMPROVE: Bump version appropriately
        uses: obi1kenobi/cargo-semver-checks-action@v2.6
        with:
          rust-toolchain: manual
          exclude: localsavefile-test # IMPROVE: External list/config for crates to ignore in workspaces
      - name: Git Set User
        run: |-
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      - name: Bump Version
        run: |
          cargo workspaces version --force '*' --no-git-push --no-individual-tags --exact -y patch
          echo "VERSION=$(cargo workspaces version --force '*' --no-git-commit -y skip | grep 'common version' | sed 's/.*version //')" >> $GITHUB_ENV
      - name: Update CHANGELOG.md
        uses: orhun/git-cliff-action@v3
        with:
          config: cliff.toml
          args: --verbose
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}
      - name: Git Commit CHANGELOG.md
        run: |-
          git add CHANGELOG.md
          git commit -m "docs: :memo: Update CHANGELOG.md"
          git push origin HEAD:auto-release-${{ env.VERSION }}
          git status
      - name: Create pull request
        run: gh pr create --title "Auto Release v${{ env.VERSION }}" --body "Auto release for v${{ env.VERSION }}" --base main --head auto-release-${{ env.VERSION }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Merge the pull request
        run: gh pr merge --auto --squash --delete-branch --repo ${{ github.repository }} $(gh pr list --base main --head auto-release-${{ env.VERSION }} --json number -q '.[0].number')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag the merge commit
        if: success()
        run: |-
          git fetch origin main
          git checkout main
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}
      - name: Cleanup branch if workflow fails
        if: failure() || always()
        run: gh api -X DELETE "repos/${{ github.repository }}/git/refs/heads/auto-release-${{ env.VERSION }}" || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
